# __init__.py
```

```

# core/server.py
```
import socket
import threading
import time
import logging
from datetime import datetime
from chat.utils.loggings import setup_logging
import tkinter as tk
from tkinter import ttk
from chat.core.config import (
    SECRET_KEY,
    IV,
    SERVER_HOST,
    TCP_PORT,
    UDP_PORT,
    IDLE_TIMEOUT,
)
from chat.utils.protocols import (
    encrypt_message,
    decrypt_message,
    pack_message,
    recv_message,
    send_message,
    ChatState,
)
setup_logging()
logger = logging.getLogger(__name__)
clients = {}  # {username: (conn, addr, last_active, connected_time)}
clients_lock = threading.Lock()
running = True
server_sock = None  # global server socket
def broadcast_message(message):
    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    message = f"{timestamp} {message}"
    encrypted = encrypt_message(SECRET_KEY, IV, message.encode("utf-8"))
    data = pack_message(encrypted)
    with clients_lock:
        for uname, (c, a, last_active, connected_time) in clients.items():
            try:
                c.sendall(data)
            except Exception as e:
                logger.warning(f"Failed to send message to {uname} at {a}: {e}")
def broadcast_presence():
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    while running:
        with clients_lock:
            online_users = list(clients.keys())
        message = "ONLINE_USERS:" + ",".join(online_users)
        try:
            udp_sock.sendto(message.encode("utf-8"), ("<broadcast>", UDP_PORT))
        except Exception as e:
            logger.warning(f"Failed to send UDP presence broadcast: {e}")
        time.sleep(5)
    udp_sock.close()
def disconnect_user(username, reason="timeout"):
    with clients_lock:
        if username in clients:
            conn, addr, la, ct = clients[username]
            if reason in (ChatState.MANUAL_KICKED, ChatState.IDLE_TIMEOUT):
                reason = reason.value
                send_message(conn, reason)
            logger.info(f"Disconnecting {username}, Reason: {reason}")
            try:
                conn.close()
            except Exception as e:
                logger.warning(f"Error disconnecting {username}: {e}")
            del clients[username]
def shutdown_server():
    global running
    global server_sock
    running = False
    logger.info("Shutting down server...")
    if server_sock:
        server_sock.close()
    with clients_lock:
        for uname, (c, addr, la, ct) in list(clients.items()):
            try:
                c.close()
            except:
                pass
        clients.clear()
    logger.info("All clients disconnected. Server shutdown complete.")
def get_idle_users():
    now = time.time()
    with clients_lock:
        return [u for u, (c, a, la, ct) in clients.items() if now - la > IDLE_TIMEOUT]
def monitor_idle():
    while running:
        idle_users = get_idle_users()
        for u in idle_users:
            disconnect_user(u, ChatState.IDLE_TIMEOUT)
        time.sleep(10)
def handle_client(conn, addr):
    username_data = recv_message(conn)
    if username_data is None:
        conn.close()
        return
    try:
        decrypted = decrypt_message(SECRET_KEY, IV, username_data)
        username = decrypted.decode("utf-8")
    except Exception as e:
        logger.error(f"Error decrypting username: {e}, Closing connection.")
        conn.close()
        return
    with clients_lock:
        if username in clients:
            send_message(conn, "ERROR: Username already taken.")
            conn.close()
            return
        clients[username] = (conn, addr, time.time(), time.time())
    logger.info(f"{username} connected from {addr}")
    broadcast_message(f"{username} joined the chat.")
    while True:
        msg = recv_message(conn)
        if msg is None:
            break
        with clients_lock:
            if username in clients:
                c, a, la, ct = clients[username]
                clients[username] = (c, a, time.time(), ct)
        try:
            decrypted = decrypt_message(SECRET_KEY, IV, msg)
            text = decrypted.decode("utf-8")
            broadcast_message(f"{username}: {text}")
        except:
            break
    disconnect_user(username, "client disconnected")
    broadcast_message(f"{username} left the chat.")
    logger.info(f"{username} disconnected from {addr}")
class ServerMonitorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Server Monitor")
        frame_top = tk.Frame(self.root)
        frame_top.pack(padx=5, pady=5, fill=tk.X)
        self.broadcast_entry = tk.Entry(frame_top)
        self.broadcast_entry.pack(side=tk.LEFT, padx=5)
        tk.Button(frame_top, text="Broadcast", command=self.do_broadcast).pack(
            side=tk.LEFT, padx=5
        )
        tk.Button(frame_top, text="Kick User", command=self.kick_user).pack(
            side=tk.LEFT, padx=5
        )
        tk.Button(frame_top, text="Disconnect All", command=self.disconnect_all).pack(
            side=tk.LEFT, padx=5
        )
        tk.Button(frame_top, text="Shutdown Server", command=self.shutdown).pack(
            side=tk.LEFT, padx=5
        )
        self.tree = ttk.Treeview(
            self.root,
            columns=("username", "address", "status", "connected_time", "idle_time"),
            show="headings",
        )
        self.tree.heading("username", text="Username")
        self.tree.heading("address", text="Address")
        self.tree.heading("status", text="Status")
        self.tree.heading("connected_time", text="Connected Duration")
        self.tree.heading("idle_time", text="Idle Time")
        self.tree.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)
        self.update_clients()
    def update_clients(self):
        existing_users = {}
        for item in self.tree.get_children():
            vals = self.tree.item(item, "values")
            if vals:
                existing_users[vals[0]] = item
        now = time.time()
        with clients_lock:
            snapshot = list(clients.items())
        current_usernames = set(u for u, _ in snapshot)
        for username, (conn, addr, last_active, connected_time) in snapshot:
            connected_duration = now - connected_time
            idle_time = now - last_active
            vals = (
                username,
                f"{addr[0]}:{addr[1]}",
                "Connected",
                f"{connected_duration:.1f}s",
                f"{idle_time:.1f}s",
            )
            if username in existing_users:
                self.tree.item(existing_users[username], values=vals)
            else:
                self.tree.insert("", tk.END, values=vals)
        for username, item_id in existing_users.items():
            if username not in current_usernames:
                self.tree.delete(item_id)
        self.root.after(1000, self.update_clients)
    def kick_user(self):
        selection = self.tree.selection()
        if not selection:
            return
        item = selection[0]
        vals = self.tree.item(item, "values")
        username = vals[0]
        disconnect_user(username, ChatState.MANUAL_KICKED)
        broadcast_message(f"{username} was kicked by the admin.")
    def do_broadcast(self):
        msg = self.broadcast_entry.get().strip()
        if msg:
            broadcast_message("[Broadcast] " + msg)
            self.broadcast_entry.delete(0, tk.END)
    def disconnect_all(self):
        with clients_lock:
            all_users = list(clients.keys())
        for uname in all_users:
            disconnect_user(uname, "admin command")
    def shutdown(self):
        shutdown_server()
        self.root.after(500, self.root.destroy)
def server_thread():
    global running, server_sock
    logging.info(f"Starting server on {SERVER_HOST}:{TCP_PORT}")
    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((SERVER_HOST, TCP_PORT))
    server_sock.listen(5)
    logger.info(f"Listening on {SERVER_HOST}:{TCP_PORT}")
    threading.Thread(target=broadcast_presence, daemon=True).start()
    threading.Thread(target=monitor_idle, daemon=True).start()
    while running:
        try:
            server_sock.settimeout(1)
            conn, addr = server_sock.accept()
            threading.Thread(  # Handle client in separate thread
                target=handle_client, args=(conn, addr), daemon=True
            ).start()
        except socket.timeout:
            pass
        except OSError:
            break
    if running:
        shutdown_server()
if __name__ == "__main__":
    root = tk.Tk()
    gui = ServerMonitorGUI(root)
    threading.Thread(
        target=server_thread, daemon=True
    ).start()  # Background thread, set deamon=True to kill when main thread exits
    root.mainloop()
```

# core/config.py
```
import os
from dotenv import load_dotenv
load_dotenv()
SERVER_HOST = os.environ.get("CHAT_SERVER_HOST", "0.0.0.0")
CLIENT_HOST = os.environ.get("CHAT_CLIENT_HOST", "127.0.0.1")  # default to localhost
TCP_PORT = int(os.environ.get("CHAT_TCP_PORT", "5000"))
UDP_PORT = int(os.environ.get("CHAT_UDP_PORT", "5001"))
BUFFER_SIZE = int(
    os.environ.get("CHAT_BUFFER_SIZE", "4096")
)  # Generally 4096 or 8192 bytes is good
IDLE_TIMEOUT = int(os.environ.get("CHAT_IDLE_TIMEOUT", "60"))
RECONNECT_DELAY = 3
MAX_RETRIES = 3
SECRET_KEY = os.environ.get(
    "CHAT_SECRET_KEY", "this_is_a_32_byte_key_demo123456"
).encode("utf-8")  # 32 bytes
IV = os.environ.get("CHAT_IV", "0123456789ABCDEF").encode(
    "utf-8"
)  # Initialization Vector: 16 bytes
```

# core/client.py
```
import sys
import socket
import threading
import logging
import time
import tkinter as tk
from tkinter import simpledialog, scrolledtext
from chat.core.config import (
    RECONNECT_DELAY,
    MAX_RETRIES,
    CLIENT_HOST,
    TCP_PORT,
    UDP_PORT,
    BUFFER_SIZE,
    SECRET_KEY,
    IV,
)
from chat.utils.protocols import (
    encrypt_message,
    decrypt_message,
    pack_message,
    recv_message,
    send_message,
    ChatState,
)
from chat.utils.loggings import setup_logging
setup_logging()
logger = logging.getLogger(__name__)
class ChatClient:
    def __init__(self, master):
        username_arg = None
        if len(sys.argv) > 1:
            username_arg = sys.argv[1]
        if username_arg is None:
            self.username = simpledialog.askstring(
                "Username", "Enter your username:", parent=master
            )
            if not self.username:
                master.destroy()
                return
        else:
            self.username = username_arg
        self.master = master
        self.master.title(f"Chat Client - {self.username}")
        main_frame = tk.Frame(self.master)
        main_frame.pack(fill=tk.BOTH, expand=True)
        left_frame = tk.Frame(main_frame, width=200, bg="#f0f0f0")
        left_frame.pack(side=tk.LEFT, fill=tk.Y)
        self.online_users_label = tk.Label(
            left_frame, text="Online users: 0", bg="#f0f0f0"
        )
        self.online_users_label.pack(pady=(10, 0))
        self.online_users_list = tk.Listbox(left_frame)
        self.online_users_list.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        right_frame = tk.Frame(main_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        self.chat_display = scrolledtext.ScrolledText(right_frame, state="disabled")
        self.chat_display.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        self.chat_display.tag_config("system", foreground="green")
        self.chat_display.tag_config("left", foreground="gray")
        self.chat_display.tag_config("broadcast", foreground="red")
        self.chat_display.tag_config("timestamp", foreground="blue")
        entry_frame = tk.Frame(right_frame)
        entry_frame.pack(fill=tk.X, padx=10, pady=5)
        self.entry = tk.Entry(entry_frame, font=("Arial", 12))
        self.entry.pack(side=tk.LEFT, fill=tk.X, padx=5, expand=True)
        self.entry.bind("<Return>", self.send)
        self.send_button = tk.Button(entry_frame, text="Send", command=self.send)
        self.send_button.pack(side=tk.RIGHT, padx=5)
        self.conn = None
        self.connected = False
        self.online_users = []
        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        self.udp_socket.bind(("", UDP_PORT))
        threading.Thread(target=self.listen_udp, daemon=True).start()
        threading.Thread(target=self.connect_to_server, daemon=True).start()
    def connect_to_server(self):
        retries = 0
        while not self.connected and retries < MAX_RETRIES:
            try:
                self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.conn.connect((CLIENT_HOST, TCP_PORT))
                send_message(self.conn, self.username)
                self.connected = True
                self.append_chat(f"[System] Connected as {self.username}.")
                threading.Thread(target=self.receive_messages, daemon=True).start()
                return
            except socket.error:
                retries += 1
                self.append_chat(
                    f"[System] Connection failed. Retrying: {retries}/{MAX_RETRIES}"
                )
                time.sleep(RECONNECT_DELAY)
        if not self.connected:
            self.append_chat(
                "[System] Unable to connect to the server after multiple attempts."
            )
            self.master.after(3000, self.master.destroy)
            raise ConnectionError(
                "Unable to connect to the server after multiple attempts."
            )
    def send(self, event=None):
        msg = self.entry.get()
        if msg.strip():
            try:
                send_message(self.conn, msg)
                self.entry.delete(0, tk.END)
            except Exception as e:
                logger.error(f"Error sending message: {e}")
                self.connected = False
    def receive_messages(self):
        while self.connected:
            try:
                data = recv_message(self.conn)
                if data is None:
                    self.connected = False
                    self.append_chat(
                        "[System] Disconnected from server. Attempting to reconnect..."
                    )
                    self.conn.close()
                    self.conn = None
                    self.connect_to_server()
                    return
                decrypted = decrypt_message(SECRET_KEY, IV, data).decode("utf-8")
                if decrypted in (
                    ChatState.MANUAL_KICKED.value,
                    ChatState.IDLE_TIMEOUT.value,
                ):  # Do not allow reconnection if kicked
                    self.append_chat(
                        f"[System] You have been kicked out from the chat, reason: {decrypted}"
                    )
                    self.connected = False
                    self.master.after(2000, self.master.destroy)
                    return
                self.append_chat(decrypted)
            except Exception as e:
                logger.error(f"Error receiving message: {e}")
                self.connected = False
                self.append_chat(
                    "[System] Error receiving message. Attempting to reconnect..."
                )
                self.connect_to_server()
                break
    def listen_udp(self):
        while True:
            data, addr = self.udp_socket.recvfrom(BUFFER_SIZE)
            msg = data.decode("utf-8")
            if msg.startswith("ONLINE_USERS:"):
                users = (
                    msg.split(":", 1)[1].split(",")
                    if len(msg.split(":", 1)) > 1 and msg.split(":", 1)[1].strip() != ""
                    else []
                )
                self.online_users = users
                self.update_online_users()
    def update_online_users(self):
        count = len(self.online_users)
        self.online_users_label.config(text=f"Online users: {count}")
        self.online_users_list.delete(0, tk.END)
        for user in self.online_users:
            self.online_users_list.insert(tk.END, user)
    def append_chat(self, text):
        self.chat_display.config(state="normal")
        if text.startswith("["):
            end_idx = text.find("]")
            if end_idx != -1:
                timestamp = text[: end_idx + 1]
                message = text[end_idx + 2 :]
                self.chat_display.insert(tk.END, timestamp + " ", "timestamp")
                if message.startswith("[System]"):
                    tag = "system"
                elif "joined the chat." in message or "left the chat." in message:
                    tag = "left"
                elif "[Broadcast]" in message:
                    tag = "broadcast"
                else:
                    tag = None
                self.chat_display.insert(tk.END, message + "\n", tag)
                self.chat_display.config(state="disabled")
                self.chat_display.yview(tk.END)
                return
        if text.startswith("[System]"):
            tag = "system"
        elif "joined the chat." in text or "left the chat." in text:
            tag = "left"
        elif "[Broadcast]" in text:
            tag = "broadcast"
        else:
            tag = None
        self.chat_display.insert(tk.END, text + "\n", tag)
        self.chat_display.config(state="disabled")
        self.chat_display.yview(tk.END)
if __name__ == "__main__":
    root = tk.Tk()
    app = ChatClient(root)
    root.mainloop()
```

# utils/protocols.py
```
import struct
import logging
from enum import Enum
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from chat.core.config import BUFFER_SIZE, SECRET_KEY, IV
logger = logging.getLogger(__name__)
def encrypt_message(key, iv, plaintext):
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    padder = padding.PKCS7(128).padder()  # padding is required for CBC mode
    padded_data = padder.update(plaintext) + padder.finalize()
    return encryptor.update(padded_data) + encryptor.finalize()
def decrypt_message(key, iv, ciphertext):
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    decryptor = cipher.decryptor()
    decrypted_padded = decryptor.update(ciphertext) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    return unpadder.update(decrypted_padded) + unpadder.finalize()
def pack_message(msg_bytes):
    length = len(msg_bytes)
    return struct.pack("!I", length) + msg_bytes
def send_message(conn, message):
    encrypted = encrypt_message(SECRET_KEY, IV, message.encode("utf-8"))
    msg = pack_message(encrypted)
    try:
        conn.sendall(msg)
    except Exception as e:
        logger.warning(f"Failed to send message: {e}")
def recv_message(conn, buffer_size=BUFFER_SIZE):
    try:
        header = conn.recv(4)
        if not header:
            return None
        length = struct.unpack("!I", header)[0]
        data = b""
        while len(data) < length:
            chunk = conn.recv(buffer_size)
            logger.debug(f"Received chunk: {chunk} with length: {len(chunk)}")
            if not chunk:
                return None
            data += chunk
        return data
    except:
        return None
class ChatState(Enum):
    MANUAL_KICKED = "MANUAL_KICKED"
    IDLE_TIMEOUT = "IDLE_TIMEOUT"
    SERVER_SHUTDOWN = "SERVER_SHUTDOWN"
```

# utils/loggings.py
```
import logging
import logging.handlers
def setup_logging(
    log_level=logging.INFO,
):
    logger = logging.getLogger()
    logger.setLevel(log_level)
    formatter = logging.Formatter(
        fmt="%(asctime)s [%(levelname)s] [%(name)s] %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
```

